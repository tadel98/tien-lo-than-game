
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  username: 'username',
  email: 'email',
  password: 'password',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  token: 'token',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt'
};

exports.Prisma.PlayerScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  name: 'name',
  level: 'level',
  realm: 'realm',
  experience: 'experience',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ResourceScalarFieldEnum = {
  id: 'id',
  name: 'name',
  displayName: 'displayName',
  description: 'description',
  icon: 'icon',
  color: 'color',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PlayerResourceScalarFieldEnum = {
  id: 'id',
  playerId: 'playerId',
  resourceId: 'resourceId',
  amount: 'amount',
  locked: 'locked',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CompanionScalarFieldEnum = {
  id: 'id',
  name: 'name',
  displayName: 'displayName',
  description: 'description',
  icon: 'icon',
  rarity: 'rarity',
  basePower: 'basePower',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PlayerCompanionScalarFieldEnum = {
  id: 'id',
  playerId: 'playerId',
  companionId: 'companionId',
  level: 'level',
  power: 'power',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AchievementScalarFieldEnum = {
  id: 'id',
  name: 'name',
  displayName: 'displayName',
  description: 'description',
  icon: 'icon',
  category: 'category',
  points: 'points',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PlayerAchievementScalarFieldEnum = {
  id: 'id',
  playerId: 'playerId',
  achievementId: 'achievementId',
  unlockedAt: 'unlockedAt'
};

exports.Prisma.QuestScalarFieldEnum = {
  id: 'id',
  name: 'name',
  displayName: 'displayName',
  description: 'description',
  category: 'category',
  difficulty: 'difficulty',
  rewards: 'rewards',
  requirements: 'requirements',
  isActive: 'isActive',
  isRepeatable: 'isRepeatable',
  repeatInterval: 'repeatInterval',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PlayerQuestScalarFieldEnum = {
  id: 'id',
  playerId: 'playerId',
  questId: 'questId',
  status: 'status',
  progress: 'progress',
  startedAt: 'startedAt',
  completedAt: 'completedAt',
  lastCompletedAt: 'lastCompletedAt',
  cooldownUntil: 'cooldownUntil',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PlayerStatsScalarFieldEnum = {
  id: 'id',
  playerId: 'playerId',
  hp: 'hp',
  mp: 'mp',
  attack: 'attack',
  defense: 'defense',
  speed: 'speed',
  luck: 'luck',
  wisdom: 'wisdom',
  strength: 'strength',
  agility: 'agility',
  vitality: 'vitality',
  spirit: 'spirit',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EquipmentTypeScalarFieldEnum = {
  id: 'id',
  name: 'name',
  displayName: 'displayName',
  description: 'description',
  slot: 'slot',
  icon: 'icon',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EquipmentScalarFieldEnum = {
  id: 'id',
  name: 'name',
  displayName: 'displayName',
  description: 'description',
  typeId: 'typeId',
  rarity: 'rarity',
  level: 'level',
  stats: 'stats',
  requirements: 'requirements',
  price: 'price',
  isTradeable: 'isTradeable',
  isSellable: 'isSellable',
  icon: 'icon',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PlayerEquipmentScalarFieldEnum = {
  id: 'id',
  playerId: 'playerId',
  equipmentId: 'equipmentId',
  isEquipped: 'isEquipped',
  durability: 'durability',
  enhancement: 'enhancement',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SkillScalarFieldEnum = {
  id: 'id',
  name: 'name',
  displayName: 'displayName',
  description: 'description',
  category: 'category',
  type: 'type',
  level: 'level',
  maxLevel: 'maxLevel',
  cooldown: 'cooldown',
  mpCost: 'mpCost',
  damage: 'damage',
  effects: 'effects',
  requirements: 'requirements',
  icon: 'icon',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PlayerSkillScalarFieldEnum = {
  id: 'id',
  playerId: 'playerId',
  skillId: 'skillId',
  level: 'level',
  isLearned: 'isLearned',
  learnedAt: 'learnedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TalentTypeScalarFieldEnum = {
  id: 'id',
  name: 'name',
  displayName: 'displayName',
  description: 'description',
  icon: 'icon',
  color: 'color',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TalentScalarFieldEnum = {
  id: 'id',
  name: 'name',
  displayName: 'displayName',
  description: 'description',
  typeId: 'typeId',
  rarity: 'rarity',
  level: 'level',
  maxLevel: 'maxLevel',
  effects: 'effects',
  requirements: 'requirements',
  cost: 'cost',
  isActive: 'isActive',
  icon: 'icon',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PlayerTalentScalarFieldEnum = {
  id: 'id',
  playerId: 'playerId',
  talentId: 'talentId',
  level: 'level',
  isUnlocked: 'isUnlocked',
  unlockedAt: 'unlockedAt',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BuffScalarFieldEnum = {
  id: 'id',
  name: 'name',
  displayName: 'displayName',
  description: 'description',
  type: 'type',
  category: 'category',
  effects: 'effects',
  duration: 'duration',
  stackable: 'stackable',
  icon: 'icon',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PlayerBuffScalarFieldEnum = {
  id: 'id',
  playerId: 'playerId',
  buffId: 'buffId',
  level: 'level',
  stacks: 'stacks',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.GameConfigScalarFieldEnum = {
  id: 'id',
  key: 'key',
  value: 'value',
  type: 'type',
  category: 'category',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ShopScalarFieldEnum = {
  id: 'id',
  name: 'name',
  displayName: 'displayName',
  description: 'description',
  category: 'category',
  isActive: 'isActive',
  icon: 'icon',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ShopItemScalarFieldEnum = {
  id: 'id',
  shopId: 'shopId',
  itemType: 'itemType',
  itemId: 'itemId',
  name: 'name',
  displayName: 'displayName',
  description: 'description',
  price: 'price',
  currency: 'currency',
  stock: 'stock',
  isActive: 'isActive',
  level: 'level',
  rarity: 'rarity',
  icon: 'icon',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PurchaseHistoryScalarFieldEnum = {
  id: 'id',
  playerId: 'playerId',
  shopId: 'shopId',
  itemId: 'itemId',
  itemName: 'itemName',
  quantity: 'quantity',
  price: 'price',
  currency: 'currency',
  totalCost: 'totalCost',
  createdAt: 'createdAt'
};

exports.Prisma.InventoryScalarFieldEnum = {
  id: 'id',
  playerId: 'playerId',
  itemType: 'itemType',
  itemId: 'itemId',
  name: 'name',
  quantity: 'quantity',
  stackable: 'stackable',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RecipeScalarFieldEnum = {
  id: 'id',
  name: 'name',
  displayName: 'displayName',
  description: 'description',
  category: 'category',
  level: 'level',
  successRate: 'successRate',
  materials: 'materials',
  result: 'result',
  experience: 'experience',
  isActive: 'isActive',
  icon: 'icon',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CraftingHistoryScalarFieldEnum = {
  id: 'id',
  playerId: 'playerId',
  recipeId: 'recipeId',
  success: 'success',
  quantity: 'quantity',
  materials: 'materials',
  result: 'result',
  createdAt: 'createdAt'
};

exports.Prisma.DaoFurnaceScalarFieldEnum = {
  id: 'id',
  name: 'name',
  displayName: 'displayName',
  description: 'description',
  level: 'level',
  maxLevel: 'maxLevel',
  efficiency: 'efficiency',
  isActive: 'isActive',
  icon: 'icon',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PlayerFurnaceScalarFieldEnum = {
  id: 'id',
  playerId: 'playerId',
  furnaceId: 'furnaceId',
  level: 'level',
  experience: 'experience',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SpiritBeastTypeScalarFieldEnum = {
  id: 'id',
  name: 'name',
  displayName: 'displayName',
  description: 'description',
  category: 'category',
  baseStats: 'baseStats',
  growthRate: 'growthRate',
  skills: 'skills',
  icon: 'icon',
  color: 'color',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SpiritBeastScalarFieldEnum = {
  id: 'id',
  playerId: 'playerId',
  typeId: 'typeId',
  name: 'name',
  level: 'level',
  experience: 'experience',
  stats: 'stats',
  skills: 'skills',
  happiness: 'happiness',
  hunger: 'hunger',
  health: 'health',
  isActive: 'isActive',
  isFighting: 'isFighting',
  capturedAt: 'capturedAt',
  lastFedAt: 'lastFedAt',
  lastPlayedAt: 'lastPlayedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BeastFoodScalarFieldEnum = {
  id: 'id',
  name: 'name',
  displayName: 'displayName',
  description: 'description',
  category: 'category',
  effects: 'effects',
  price: 'price',
  currency: 'currency',
  icon: 'icon',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BeastFeedingHistoryScalarFieldEnum = {
  id: 'id',
  playerId: 'playerId',
  beastId: 'beastId',
  foodId: 'foodId',
  quantity: 'quantity',
  effects: 'effects',
  createdAt: 'createdAt'
};

exports.Prisma.HuntingGroundScalarFieldEnum = {
  id: 'id',
  name: 'name',
  displayName: 'displayName',
  description: 'description',
  level: 'level',
  maxLevel: 'maxLevel',
  difficulty: 'difficulty',
  beastTypes: 'beastTypes',
  dropRates: 'dropRates',
  isActive: 'isActive',
  icon: 'icon',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.HuntingHistoryScalarFieldEnum = {
  id: 'id',
  playerId: 'playerId',
  groundId: 'groundId',
  beastId: 'beastId',
  success: 'success',
  duration: 'duration',
  rewards: 'rewards',
  createdAt: 'createdAt'
};

exports.Prisma.PlayerCultivationScalarFieldEnum = {
  id: 'id',
  playerId: 'playerId',
  currentRealm: 'currentRealm',
  currentFloor: 'currentFloor',
  currentExp: 'currentExp',
  totalExpGained: 'totalExpGained',
  currentQuality: 'currentQuality',
  eternalTitles: 'eternalTitles',
  hasAscended: 'hasAscended',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CultivationLogScalarFieldEnum = {
  id: 'id',
  playerId: 'playerId',
  type: 'type',
  description: 'description',
  expGained: 'expGained',
  levelGained: 'levelGained',
  timestamp: 'timestamp'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  User: 'User',
  Session: 'Session',
  Player: 'Player',
  Resource: 'Resource',
  PlayerResource: 'PlayerResource',
  Companion: 'Companion',
  PlayerCompanion: 'PlayerCompanion',
  Achievement: 'Achievement',
  PlayerAchievement: 'PlayerAchievement',
  Quest: 'Quest',
  PlayerQuest: 'PlayerQuest',
  PlayerStats: 'PlayerStats',
  EquipmentType: 'EquipmentType',
  Equipment: 'Equipment',
  PlayerEquipment: 'PlayerEquipment',
  Skill: 'Skill',
  PlayerSkill: 'PlayerSkill',
  TalentType: 'TalentType',
  Talent: 'Talent',
  PlayerTalent: 'PlayerTalent',
  Buff: 'Buff',
  PlayerBuff: 'PlayerBuff',
  GameConfig: 'GameConfig',
  Shop: 'Shop',
  ShopItem: 'ShopItem',
  PurchaseHistory: 'PurchaseHistory',
  Inventory: 'Inventory',
  Recipe: 'Recipe',
  CraftingHistory: 'CraftingHistory',
  DaoFurnace: 'DaoFurnace',
  PlayerFurnace: 'PlayerFurnace',
  SpiritBeastType: 'SpiritBeastType',
  SpiritBeast: 'SpiritBeast',
  BeastFood: 'BeastFood',
  BeastFeedingHistory: 'BeastFeedingHistory',
  HuntingGround: 'HuntingGround',
  HuntingHistory: 'HuntingHistory',
  PlayerCultivation: 'PlayerCultivation',
  CultivationLog: 'CultivationLog'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
