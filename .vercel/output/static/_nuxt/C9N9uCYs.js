import{z as R,r as l}from"#entry";const C=R("player",()=>{const c=l(null),u=l([]),i=l([]),p=l([]),v=l([]),t=l(!1),s=l(null),d=a=>u.value.find(e=>e.resource.name===a),g=()=>i.value.filter(a=>a.isActive),$=()=>v.value.filter(a=>a.status==="completed"),y=async a=>{try{t.value=!0,s.value=null;const e=await $fetch(`/api/player/${a}`),{data:r}=e;c.value=r}catch(e){s.value=e.message,console.error("Error fetching player:",e)}finally{t.value=!1}},h=async a=>{try{t.value=!0,s.value=null;const e=await $fetch(`/api/player/resources?playerId=${a}`),{data:r}=e;u.value=r}catch(e){s.value=e.message,console.error("Error fetching resources:",e)}finally{t.value=!1}},m=async a=>{try{t.value=!0,s.value=null;const e=await $fetch(`/api/player/companions?playerId=${a}`),{data:r}=e;i.value=r}catch(e){s.value=e.message,console.error("Error fetching companions:",e)}finally{t.value=!1}},f=async(a,e,r,o=0)=>{try{t.value=!0,s.value=null;const n=await $fetch("/api/player/resources/update",{method:"POST",body:{playerId:a,resourceId:e,amount:r,locked:o}}),w=u.value.findIndex(P=>P.resourceId===e);return w!==-1&&(u.value[w]=n.data),n.data}catch(n){throw s.value=n.message,console.error("Error updating resource:",n),n}finally{t.value=!1}};return{player:c,resources:u,companions:i,achievements:p,quests:v,loading:t,error:s,getResourceByName:d,getActiveCompanions:g,getCompletedQuests:$,fetchPlayer:y,fetchResources:h,fetchCompanions:m,updateResource:f,updatePlayer:async(a,e)=>{try{t.value=!0,s.value=null;const r=await $fetch("/api/player/update",{method:"POST",body:{playerId:a,...e}});return c.value&&Object.assign(c.value,r.data),r.data}catch(r){throw s.value=r.message,console.error("Error updating player:",r),r}finally{t.value=!1}},addResource:async(a,e,r)=>{const o=d(e);if(!o)throw new Error(`Resource ${e} not found`);const n=Number(o.amount)+r;return await f(a,o.resourceId,n,o.locked)},spendResource:async(a,e,r)=>{const o=d(e);if(!o)throw new Error(`Resource ${e} not found`);if(Number(o.amount)<r)throw new Error(`Không đủ ${e}`);const n=Number(o.amount)-r;return await f(a,o.resourceId,n,o.locked)},initializePlayer:async a=>{await Promise.all([y(a),h(a),m(a)])},reset:()=>{c.value=null,u.value=[],i.value=[],p.value=[],v.value=[],t.value=!1,s.value=null}}});export{C as u};
