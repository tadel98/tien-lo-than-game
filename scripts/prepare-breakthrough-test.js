const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function prepareBreakthroughTest() {
  try {
    await prisma.$connect();
    console.log('‚úÖ K·∫øt n·ªëi database th√†nh c√¥ng');
    
    // L·∫•y player ƒë·∫ßu ti√™n
    const player = await prisma.player.findFirst();
    
    if (player) {
      console.log('üéÆ Preparing player:', player.name);
      
      // C·∫•p ƒë·ªß kinh nghi·ªám ƒë·ªÉ ƒë·ªôt ph√° (level 1 -> 2 c·∫ßn 1440 EXP)
      const requiredExp = Math.pow(player.level, 2) * 1440;
      console.log('üìä Required EXP for breakthrough:', requiredExp);
      
      // C·∫≠p nh·∫≠t kinh nghi·ªám
      await prisma.player.update({
        where: { id: player.id },
        data: {
          experience: BigInt(requiredExp)
        }
      });
      console.log('‚úÖ Updated experience to:', requiredExp);
      
      // C·∫•p ƒë·ªß Ti√™n Ng·ªçc (c·∫ßn 1000 cho level 1)
      const tienNgocResource = await prisma.resource.findFirst({
        where: { name: 'tien_ngoc' }
      });
      
      if (tienNgocResource) {
        await prisma.playerResource.upsert({
          where: {
            playerId_resourceId: {
              playerId: player.id,
              resourceId: tienNgocResource.id
            }
          },
          update: {
            amount: 10000 // C·∫•p nhi·ªÅu ƒë·ªÉ test
          },
          create: {
            playerId: player.id,
            resourceId: tienNgocResource.id,
            amount: 10000,
            locked: 0
          }
        });
        console.log('‚úÖ Updated Ti√™n Ng·ªçc to: 10000');
      }
      
      // C·∫•p ƒë·ªß Linh Th·∫°ch (c·∫ßn 5000 cho level 1)
      const linhThachResource = await prisma.resource.findFirst({
        where: { name: 'linh_thach' }
      });
      
      if (linhThachResource) {
        await prisma.playerResource.upsert({
          where: {
            playerId_resourceId: {
              playerId: player.id,
              resourceId: linhThachResource.id
            }
          },
          update: {
            amount: 50000 // C·∫•p nhi·ªÅu ƒë·ªÉ test
          },
          create: {
            playerId: player.id,
            resourceId: linhThachResource.id,
            amount: 50000,
            locked: 0
          }
        });
        console.log('‚úÖ Updated Linh Th·∫°ch to: 50000');
      }
      
      console.log('üéâ Player ready for breakthrough test!');
    }
  } catch (error) {
    console.error('‚ùå Error:', error);
  } finally {
    await prisma.$disconnect();
  }
}

prepareBreakthroughTest();
