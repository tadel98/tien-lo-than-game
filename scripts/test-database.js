const { PrismaClient } = require('@prisma/client')

const prisma = new PrismaClient()

async function testDatabase() {
  console.log('üß™ B·∫Øt ƒë·∫ßu test database...')
  
  try {
    // Test 1: K·∫øt n·ªëi database
    console.log('\n1Ô∏è‚É£ Test k·∫øt n·ªëi database...')
    await prisma.$connect()
    console.log('‚úÖ K·∫øt n·ªëi database th√†nh c√¥ng!')

    // Test 2: Ki·ªÉm tra tables
    console.log('\n2Ô∏è‚É£ Test ki·ªÉm tra tables...')
    
    // Test User table
    try {
      const userCount = await prisma.user.count()
      console.log(`‚úÖ User table: ${userCount} records`)
    } catch (error) {
      console.log(`‚ùå User table error: ${error.message}`)
    }

    // Test Player table
    try {
      const playerCount = await prisma.player.count()
      console.log(`‚úÖ Player table: ${playerCount} records`)
    } catch (error) {
      console.log(`‚ùå Player table error: ${error.message}`)
    }

    // Test Resource table
    try {
      const resourceCount = await prisma.resource.count()
      console.log(`‚úÖ Resource table: ${resourceCount} records`)
    } catch (error) {
      console.log(`‚ùå Resource table error: ${error.message}`)
    }

    // Test Quest table
    try {
      const questCount = await prisma.quest.count()
      console.log(`‚úÖ Quest table: ${questCount} records`)
    } catch (error) {
      console.log(`‚ùå Quest table error: ${error.message}`)
    }

    // Test Companion table
    try {
      const companionCount = await prisma.companion.count()
      console.log(`‚úÖ Companion table: ${companionCount} records`)
    } catch (error) {
      console.log(`‚ùå Companion table error: ${error.message}`)
    }

    // Test 3: T·∫°o test data
    console.log('\n3Ô∏è‚É£ Test t·∫°o test data...')
    
    // T·∫°o test user
    const testUser = await prisma.user.upsert({
      where: { email: 'test@example.com' },
      update: {},
      create: {
        email: 'test@example.com',
        name: 'Test User',
        password: 'hashedpassword'
      }
    })
    console.log(`‚úÖ T·∫°o test user: ${testUser.id}`)

    // T·∫°o test player
    const testPlayer = await prisma.player.upsert({
      where: { id: 'test-player-123' },
      update: {},
      create: {
        id: 'test-player-123',
        name: 'Test Player',
        level: 1,
        experience: 0,
        realm: 'Ph√†m c·∫£nh',
        combatPower: 100,
        userId: testUser.id
      }
    })
    console.log(`‚úÖ T·∫°o test player: ${testPlayer.id}`)

    // Test 4: Test auto cultivation
    console.log('\n4Ô∏è‚É£ Test auto cultivation...')
    
    // Simulate auto cultivation
    const expGain = 1000
    const newExp = testPlayer.experience + expGain
    
    // Check level up
    let newLevel = testPlayer.level
    let levelUp = false
    let levelGain = 0
    
    for (let level = testPlayer.level + 1; level <= 1000; level++) {
      const requiredExp = Math.pow(level, 2) * 1440
      if (newExp >= requiredExp) {
        newLevel = level
        levelUp = true
        levelGain = level - testPlayer.level
      } else {
        break
      }
    }

    // Update player
    const updatedPlayer = await prisma.player.update({
      where: { id: testPlayer.id },
      data: {
        experience: newExp,
        level: newLevel,
        updatedAt: new Date()
      }
    })

    console.log(`‚úÖ Auto cultivation test: Level ${testPlayer.level} ‚Üí ${updatedPlayer.level}`)
    if (levelUp) {
      console.log(`üéâ Level up! +${levelGain} level(s)`)
    }

    // Test 5: Test queries
    console.log('\n5Ô∏è‚É£ Test queries...')
    
    // Get all players
    const players = await prisma.player.findMany({
      take: 5,
      orderBy: { level: 'desc' }
    })
    console.log(`‚úÖ Found ${players.length} players`)

    // Get player with resources
    const playerWithResources = await prisma.player.findUnique({
      where: { id: testPlayer.id },
      include: {
        resources: {
          include: {
            resource: true
          }
        }
      }
    })
    console.log(`‚úÖ Player with resources: ${playerWithResources ? 'Found' : 'Not found'}`)

    // Test 6: Cleanup test data
    console.log('\n6Ô∏è‚É£ Cleanup test data...')
    
    await prisma.player.deleteMany({
      where: { id: { startsWith: 'test-player' } }
    })
    console.log('‚úÖ Cleaned up test players')

    await prisma.user.deleteMany({
      where: { email: 'test@example.com' }
    })
    console.log('‚úÖ Cleaned up test users')

    console.log('\nüéâ T·∫•t c·∫£ tests ƒë√£ ho√†n th√†nh th√†nh c√¥ng!')

  } catch (error) {
    console.error('‚ùå Database test failed:', error)
  } finally {
    await prisma.$disconnect()
  }
}

// Run the test
testDatabase()
