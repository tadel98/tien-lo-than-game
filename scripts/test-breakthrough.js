const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function testBreakthrough() {
  try {
    await prisma.$connect();
    console.log('‚úÖ K·∫øt n·ªëi database th√†nh c√¥ng');
    
    // L·∫•y player ƒë·∫ßu ti√™n ƒë·ªÉ test
    const player = await prisma.player.findFirst({
      include: {
        resources: {
          include: { resource: true }
        }
      }
    });
    
    if (player) {
      console.log('üéÆ Player:', player.name, 'Level:', player.level);
      console.log('üíé Experience:', player.experience.toString());
      
      // Test c√¥ng th·ª©c EXP
      const currentLevel = player.level;
      const currentExp = Number(player.experience);
      const nextLevelExp = Math.pow(currentLevel, 2) * 1440;
      
      console.log('üìä Current EXP:', currentExp);
      console.log('üìä Next Level EXP needed:', nextLevelExp);
      console.log('üìä Can breakthrough:', currentExp >= nextLevelExp);
      
      // Test resources
      const tienNgoc = player.resources.find(r => r.resource.name === 'tien_ngoc');
      const linhThach = player.resources.find(r => r.resource.name === 'linh_thach');
      
      console.log('üí∞ Ti√™n Ng·ªçc:', tienNgoc ? tienNgoc.amount : 'Not found');
      console.log('üí∞ Linh Th·∫°ch:', linhThach ? linhThach.amount : 'Not found');
      
      // Test breakthrough cost
      const baseTienNgoc = 1000;
      const baseLinhThach = 5000;
      const levelMultiplier = Math.floor(currentLevel / 10) + 1;
      const costTienNgoc = baseTienNgoc * levelMultiplier;
      const costLinhThach = baseLinhThach * levelMultiplier;
      
      console.log('üí∏ Breakthrough cost - Ti√™n Ng·ªçc:', costTienNgoc);
      console.log('üí∏ Breakthrough cost - Linh Th·∫°ch:', costLinhThach);
      console.log('‚úÖ Has enough Ti√™n Ng·ªçc:', tienNgoc ? Number(tienNgoc.amount) >= costTienNgoc : false);
      console.log('‚úÖ Has enough Linh Th·∫°ch:', linhThach ? Number(linhThach.amount) >= costLinhThach : false);
      
      // Test v·ªõi level th·∫•p h∆°n
      console.log('\nüîç Testing v·ªõi level 1:');
      const testLevel = 1;
      const testNextLevelExp = Math.pow(testLevel, 2) * 1440;
      console.log('üìä Level 1 next EXP needed:', testNextLevelExp);
      console.log('üìä Current EXP >= Level 1 next EXP:', currentExp >= testNextLevelExp);
    }
  } catch (error) {
    console.error('‚ùå Error:', error);
  } finally {
    await prisma.$disconnect();
  }
}

testBreakthrough();
