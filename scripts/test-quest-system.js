const { PrismaClient } = require('@prisma/client')

const prisma = new PrismaClient()

async function testQuestSystem() {
  try {
    console.log('üß™ B·∫Øt ƒë·∫ßu test h·ªá th·ªëng nhi·ªám v·ª•...')

    // L·∫•y player ID
    const player = await prisma.player.findFirst()
    if (!player) {
      console.log('‚ùå Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi ch∆°i')
      return
    }

    const playerId = player.id
    console.log(`üë§ Test v·ªõi ng∆∞·ªùi ch∆°i: ${player.name} (ID: ${playerId})`)

    // Test 1: L·∫•y danh s√°ch nhi·ªám v·ª•
    console.log('\nüìã Test 1: L·∫•y danh s√°ch nhi·ªám v·ª•')
    const quests = await prisma.quest.findMany({
      orderBy: { difficulty: 'asc' }
    })
    console.log(`‚úÖ T√¨m th·∫•y ${quests.length} nhi·ªám v·ª•`)

    // Test 2: L·∫•y nhi·ªám v·ª• c·ªßa ng∆∞·ªùi ch∆°i
    console.log('\nüë§ Test 2: L·∫•y nhi·ªám v·ª• c·ªßa ng∆∞·ªùi ch∆°i')
    const playerQuests = await prisma.playerQuest.findMany({
      where: { playerId },
      include: { quest: true }
    })
    console.log(`‚úÖ Ng∆∞·ªùi ch∆°i c√≥ ${playerQuests.length} nhi·ªám v·ª•`)

    // Test 3: Test b·∫Øt ƒë·∫ßu nhi·ªám v·ª•
    console.log('\nüöÄ Test 3: B·∫Øt ƒë·∫ßu nhi·ªám v·ª•')
    const availableQuest = quests.find(q => 
      !playerQuests.some(pq => pq.questId === q.id)
    )

    if (availableQuest) {
      console.log(`üìù B·∫Øt ƒë·∫ßu nhi·ªám v·ª•: ${availableQuest.displayName}`)
      
      const playerQuest = await prisma.playerQuest.create({
        data: {
          playerId,
          questId: availableQuest.id,
          status: 'in_progress',
          startedAt: new Date(),
          progress: JSON.stringify({})
        }
      })
      console.log(`‚úÖ ƒê√£ b·∫Øt ƒë·∫ßu nhi·ªám v·ª•: ${playerQuest.id}`)

      // Test 4: Ho√†n th√†nh nhi·ªám v·ª•
      console.log('\nüéØ Test 4: Ho√†n th√†nh nhi·ªám v·ª•')
      
      // C·∫≠p nh·∫≠t tr·∫°ng th√°i ho√†n th√†nh
      await prisma.playerQuest.update({
        where: { id: playerQuest.id },
        data: {
          status: 'completed',
          completedAt: new Date()
        }
      })

      // Ph√¢n t√≠ch ph·∫ßn th∆∞·ªüng
      const rewards = JSON.parse(availableQuest.rewards)
      console.log(`üí∞ Ph·∫ßn th∆∞·ªüng: ${JSON.stringify(rewards, null, 2)}`)

      // C·∫≠p nh·∫≠t kinh nghi·ªám
      if (rewards.experience) {
        const newExp = Number(player.experience) + Number(rewards.experience)
        await prisma.player.update({
          where: { id: playerId },
          data: { experience: newExp }
        })
        console.log(`üìà C·ªông ${rewards.experience} EXP`)
      }

      // C·∫≠p nh·∫≠t t√†i nguy√™n
      if (rewards.resources) {
        for (const [resourceName, amount] of Object.entries(rewards.resources)) {
          const resource = await prisma.resource.findFirst({
            where: { name: resourceName }
          })

          if (resource) {
            const playerResource = await prisma.playerResource.findFirst({
              where: {
                playerId,
                resourceId: resource.id
              }
            })

            if (playerResource) {
              await prisma.playerResource.update({
                where: { id: playerResource.id },
                data: {
                  amount: Number(playerResource.amount) + Number(amount)
                }
              })
              console.log(`üíé C·ªông ${amount} ${resourceName}`)
            }
          }
        }
      }

      console.log(`‚úÖ ƒê√£ ho√†n th√†nh nhi·ªám v·ª•: ${availableQuest.displayName}`)
    } else {
      console.log('‚ö†Ô∏è Kh√¥ng c√≥ nhi·ªám v·ª• n√†o ƒë·ªÉ test')
    }

    // Test 5: Ki·ªÉm tra tr·∫°ng th√°i cu·ªëi
    console.log('\nüìä Test 5: Ki·ªÉm tra tr·∫°ng th√°i cu·ªëi')
    const finalPlayer = await prisma.player.findUnique({
      where: { id: playerId },
      include: {
        resources: {
          include: { resource: true }
        }
      }
    })

    console.log(`üë§ Ng∆∞·ªùi ch∆°i: ${finalPlayer.name}`)
    console.log(`üìà Level: ${finalPlayer.level}`)
    console.log(`‚≠ê EXP: ${finalPlayer.experience}`)
    console.log(`üíé T√†i nguy√™n:`)
    finalPlayer.resources.forEach(pr => {
      console.log(`   - ${pr.resource.name}: ${pr.amount}`)
    })

    // Test 6: Ki·ªÉm tra nhi·ªám v·ª• ƒë√£ ho√†n th√†nh
    console.log('\n‚úÖ Test 6: Nhi·ªám v·ª• ƒë√£ ho√†n th√†nh')
    const completedQuests = await prisma.playerQuest.findMany({
      where: {
        playerId,
        status: 'completed'
      },
      include: { quest: true }
    })

    console.log(`üéØ ƒê√£ ho√†n th√†nh ${completedQuests.length} nhi·ªám v·ª•:`)
    completedQuests.forEach(pq => {
      console.log(`   - ${pq.quest.displayName} (${pq.quest.difficulty})`)
    })

    console.log('\nüéâ Test h·ªá th·ªëng nhi·ªám v·ª• ho√†n th√†nh!')
  } catch (error) {
    console.error('‚ùå L·ªói test:', error)
  } finally {
    await prisma.$disconnect()
  }
}

testQuestSystem()
