import{z as m,r as c,g as S}from"#entry";const I=m("auth",()=>{const o=c(null),a=c(null),r=c(!1),s=c(!1),l=c(null),g=S(()=>r.value&&!!a.value),h=async(u,n)=>{try{s.value=!0,l.value=null;const e=await $fetch("/api/auth/login",{method:"POST",body:{username:u,password:n}});if(e.success)return o.value=e.user,a.value=e.token,r.value=!0,localStorage.setItem("auth_token",e.token),localStorage.setItem("user_data",JSON.stringify(e.user)),e}catch(e){throw l.value=e.message,console.error("Login error:",e),e}finally{s.value=!1}},f=async(u,n,e,d)=>{try{s.value=!0,l.value=null;const t=await $fetch("/api/auth/register",{method:"POST",body:{username:u,email:n,password:e,playerName:d}});if(t.success)return o.value=t.user,a.value=t.token,r.value=!0,localStorage.setItem("auth_token",t.token),localStorage.setItem("user_data",JSON.stringify(t.user)),t}catch(t){throw l.value=t.message,console.error("Register error:",t),t}finally{s.value=!1}},i=()=>{o.value=null,a.value=null,r.value=!1,l.value=null,localStorage.removeItem("auth_token"),localStorage.removeItem("user_data")},v=()=>{{const u=localStorage.getItem("auth_token"),n=localStorage.getItem("user_data");if(u&&n)try{a.value=u,o.value=JSON.parse(n),r.value=!0}catch(e){console.error("Error parsing stored user data:",e),i()}}};return{user:o,token:a,isAuthenticated:r,loading:s,error:l,isLoggedIn:g,login:h,register:f,logout:i,checkAuth:v,initializeAuth:()=>{v()},reset:()=>{o.value=null,a.value=null,r.value=!1,s.value=!1,l.value=null}}});export{I as u};
