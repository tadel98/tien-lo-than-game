{"file":"shop-DYNcnUVr.js","mappings":";;AAGO,MAAM,eAAe,YAAY,QAAQ,MAAM;AAEpD,QAAM,QAAQ,IAAW,EAAE;AAC3B,QAAM,cAAc,IAAS,IAAI;AACjC,QAAM,YAAY,IAAW,EAAE;AAC/B,QAAM,mBAAmB,IAAS,EAAE;AACpC,QAAM,UAAU,IAAI,KAAK;AACzB,QAAM,QAAQ,IAAI,IAAI;AAGtB,QAAM,oBAAoB,CAAC,aAAqB;AAC9C,WAAO,MAAM,MAAM,OAAO,CAAA,SAAQ,KAAK,aAAa,QAAQ;AAAA,EAC9D;AAEA,QAAM,qBAAqB,CAAC,aAAqB;AAC/C,WAAO,iBAAiB,MAAM,QAAQ,KAAK,CAAA;AAAA,EAC7C;AAEA,QAAM,gBAAgB,SAAS,MAAM;AACnC,WAAO,UAAU,MAAM,OAAO,CAAC,OAAO,SAAS,QAAQ,KAAK,UAAU,CAAC;AAAA,EACzE,CAAC;AAGD,QAAM,aAAa,OAAO,aAAsB;AAC9C,QAAI;AACF,cAAQ,QAAQ;AAChB,YAAM,QAAQ;AAEd,YAAM,SAAS,WAAW,aAAa,QAAQ,KAAK;AACpD,YAAM,WAAgB,MAAM,OAAO,iBAAiB,MAAM,EAAE;AAC5D,YAAM,QAAQ,SAAS;AAAA,IACzB,SAAS,KAAU;AACjB,YAAM,QAAQ,IAAI;AAClB,cAAQ,MAAM,yBAAyB,GAAG;AAAA,IAC5C,UAAA;AACE,cAAQ,QAAQ;AAAA,IAClB;AAAA,EACF;AAEA,QAAM,iBAAiB,OAAO,aAAqB;AACjD,QAAI;AACF,cAAQ,QAAQ;AAChB,YAAM,QAAQ;AAEd,YAAM,WAAgB,MAAM,OAAO,gCAAgC,QAAQ,EAAE;AAC7E,gBAAU,QAAQ,SAAS,KAAK;AAChC,uBAAiB,QAAQ,SAAS,KAAK;AAAA,IACzC,SAAS,KAAU;AACjB,YAAM,QAAQ,IAAI;AAClB,cAAQ,MAAM,6BAA6B,GAAG;AAAA,IAChD,UAAA;AACE,cAAQ,QAAQ;AAAA,IAClB;AAAA,EACF;AAEA,QAAM,eAAe,OAAO,UAAkB,QAAgB,QAAgB,WAAmB,MAAM;AACrG,QAAI;AACF,cAAQ,QAAQ;AAChB,YAAM,QAAQ;AAEd,YAAM,WAAgB,MAAM,OAAO,sBAAsB;AAAA,QACvD,QAAQ;AAAA,QACR,MAAM;AAAA,UACJ;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,QAAA;AAAA,MACF,CACD;AAGD,YAAM,eAAe,QAAQ;AAE7B,aAAO,SAAS;AAAA,IAClB,SAAS,KAAU;AACjB,YAAM,QAAQ,IAAI;AAClB,cAAQ,MAAM,0BAA0B,GAAG;AAC3C,YAAM;AAAA,IACR,UAAA;AACE,cAAQ,QAAQ;AAAA,IAClB;AAAA,EACF;AAEA,QAAM,iBAAiB,CAAC,SAAc;AACpC,gBAAY,QAAQ;AAAA,EACtB;AAEA,QAAM,iBAAiB,CAAC,WAAmB;AACzC,UAAM,SAAS;AAAA,MACb,QAAQ;AAAA,MACR,UAAU;AAAA,MACV,MAAM;AAAA,MACN,MAAM;AAAA,MACN,WAAW;AAAA,IAAA;AAEb,WAAO,OAAO,MAAM,KAAK;AAAA,EAC3B;AAEA,QAAM,kBAAkB,CAAC,aAAqB;AAC5C,UAAM,QAAQ;AAAA,MACZ,WAAW;AAAA,MACX,YAAY;AAAA,MACZ,UAAU;AAAA,MACV,OAAO;AAAA,MACP,QAAQ;AAAA,IAAA;AAEV,WAAO,MAAM,QAAQ,KAAK;AAAA,EAC5B;AAGA,QAAM,QAAQ,MAAM;AAClB,UAAM,QAAQ,CAAA;AACd,gBAAY,QAAQ;AACpB,cAAU,QAAQ,CAAA;AAClB,qBAAiB,QAAQ,CAAA;AACzB,YAAQ,QAAQ;AAChB,UAAM,QAAQ;AAAA,EAChB;AAEA,SAAO;AAAA;AAAA,IAEL;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA;AAAA,IAGA;AAAA,IACA;AAAA,IACA;AAAA;AAAA,IAGA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EAAA;AAEJ,CAAC;","names":[],"sources":["../../../../stores/shop.ts"],"sourcesContent":["import { defineStore } from 'pinia'\r\nimport { ref, computed } from 'vue'\r\n\r\nexport const useShopStore = defineStore('shop', () => {\r\n  // State\r\n  const shops = ref<any[]>([])\r\n  const currentShop = ref<any>(null)\r\n  const inventory = ref<any[]>([])\r\n  const groupedInventory = ref<any>({})\r\n  const loading = ref(false)\r\n  const error = ref(null)\r\n\r\n  // Getters\r\n  const getShopByCategory = (category: string) => {\r\n    return shops.value.filter(shop => shop.category === category)\r\n  }\r\n\r\n  const getInventoryByType = (itemType: string) => {\r\n    return groupedInventory.value[itemType] || []\r\n  }\r\n\r\n  const getTotalItems = computed(() => {\r\n    return inventory.value.reduce((total, item) => total + item.quantity, 0)\r\n  })\r\n\r\n  // Actions\r\n  const fetchShops = async (category?: string) => {\r\n    try {\r\n      loading.value = true\r\n      error.value = null\r\n\r\n      const params = category ? `?category=${category}` : ''\r\n      const response: any = await $fetch(`/api/shop/list${params}`)\r\n      shops.value = response.data\r\n    } catch (err: any) {\r\n      error.value = err.message\r\n      console.error('Error fetching shops:', err)\r\n    } finally {\r\n      loading.value = false\r\n    }\r\n  }\r\n\r\n  const fetchInventory = async (playerId: string) => {\r\n    try {\r\n      loading.value = true\r\n      error.value = null\r\n\r\n      const response: any = await $fetch(`/api/inventory/list?playerId=${playerId}`)\r\n      inventory.value = response.data.inventory\r\n      groupedInventory.value = response.data.grouped\r\n    } catch (err: any) {\r\n      error.value = err.message\r\n      console.error('Error fetching inventory:', err)\r\n    } finally {\r\n      loading.value = false\r\n    }\r\n  }\r\n\r\n  const purchaseItem = async (playerId: string, shopId: string, itemId: string, quantity: number = 1) => {\r\n    try {\r\n      loading.value = true\r\n      error.value = null\r\n\r\n      const response: any = await $fetch('/api/shop/purchase', {\r\n        method: 'POST',\r\n        body: {\r\n          playerId,\r\n          shopId,\r\n          itemId,\r\n          quantity\r\n        }\r\n      })\r\n\r\n      // Refresh inventory after purchase\r\n      await fetchInventory(playerId)\r\n\r\n      return response.data\r\n    } catch (err: any) {\r\n      error.value = err.message\r\n      console.error('Error purchasing item:', err)\r\n      throw err\r\n    } finally {\r\n      loading.value = false\r\n    }\r\n  }\r\n\r\n  const setCurrentShop = (shop: any) => {\r\n    currentShop.value = shop\r\n  }\r\n\r\n  const getRarityColor = (rarity: string) => {\r\n    const colors = {\r\n      common: '#6b7280',\r\n      uncommon: '#10b981',\r\n      rare: '#3b82f6',\r\n      epic: '#8b5cf6',\r\n      legendary: '#f59e0b'\r\n    }\r\n    return colors[rarity] || '#6b7280'\r\n  }\r\n\r\n  const getItemTypeIcon = (itemType: string) => {\r\n    const icons = {\r\n      equipment: '⚔️',\r\n      consumable: '🧪',\r\n      material: '💎',\r\n      skill: '📜',\r\n      talent: '⭐'\r\n    }\r\n    return icons[itemType] || '📦'\r\n  }\r\n\r\n  // Reset store\r\n  const reset = () => {\r\n    shops.value = []\r\n    currentShop.value = null\r\n    inventory.value = []\r\n    groupedInventory.value = {}\r\n    loading.value = false\r\n    error.value = null\r\n  }\r\n\r\n  return {\r\n    // State\r\n    shops,\r\n    currentShop,\r\n    inventory,\r\n    groupedInventory,\r\n    loading,\r\n    error,\r\n\r\n    // Getters\r\n    getShopByCategory,\r\n    getInventoryByType,\r\n    getTotalItems,\r\n\r\n    // Actions\r\n    fetchShops,\r\n    fetchInventory,\r\n    purchaseItem,\r\n    setCurrentShop,\r\n    getRarityColor,\r\n    getItemTypeIcon,\r\n    reset\r\n  }\r\n})\r\n"],"version":3}