{"file":"player-B72JDVVQ.js","mappings":"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","names":[],"sources":["../../../../stores/player.ts"],"sourcesContent":["import { defineStore } from 'pinia'\r\nimport { ref } from 'vue'\r\n\r\nexport const usePlayerStore = defineStore('player', () => {\r\n  // State\r\n  const player = ref<any>(null)\r\n  const resources = ref<any[]>([])\r\n  const companions = ref<any[]>([])\r\n  const achievements = ref<any[]>([])\r\n  const quests = ref<any[]>([])\r\n  const loading = ref(false)\r\n  const error = ref(null)\r\n\r\n  // Getters\r\n  const getResourceByName = (name: string) => {\r\n    return resources.value.find(r => r.resource.name === name)\r\n  }\r\n\r\n  const getActiveCompanions = () => {\r\n    return companions.value.filter(c => c.isActive)\r\n  }\r\n\r\n  const getCompletedQuests = () => {\r\n    return quests.value.filter(q => q.status === 'completed')\r\n  }\r\n\r\n  // Actions\r\n  const fetchPlayer = async (playerId: string) => {\r\n    try {\r\n      loading.value = true\r\n      error.value = null\r\n\r\n      const response: any = await $fetch(`/api/player/${playerId}`)\r\n      const { data } = response\r\n      player.value = data\r\n    } catch (err: any) {\r\n      error.value = err.message\r\n      console.error('Error fetching player:', err)\r\n    } finally {\r\n      loading.value = false\r\n    }\r\n  }\r\n\r\n  const fetchResources = async (playerId: string) => {\r\n    try {\r\n      loading.value = true\r\n      error.value = null\r\n\r\n      const response: any = await $fetch(`/api/player/resources?playerId=${playerId}`)\r\n      const { data } = response\r\n      resources.value = data\r\n    } catch (err: any) {\r\n      error.value = err.message\r\n      console.error('Error fetching resources:', err)\r\n    } finally {\r\n      loading.value = false\r\n    }\r\n  }\r\n\r\n  const fetchCompanions = async (playerId: string) => {\r\n    try {\r\n      loading.value = true\r\n      error.value = null\r\n\r\n      const response: any = await $fetch(`/api/player/companions?playerId=${playerId}`)\r\n      const { data } = response\r\n      companions.value = data\r\n    } catch (err: any) {\r\n      error.value = err.message\r\n      console.error('Error fetching companions:', err)\r\n    } finally {\r\n      loading.value = false\r\n    }\r\n  }\r\n\r\n  const updateResource = async (playerId: string, resourceId: string, amount: number, locked: number = 0) => {\r\n    try {\r\n      loading.value = true\r\n      error.value = null\r\n\r\n      const response: any = await $fetch('/api/player/resources/update', {\r\n        method: 'POST',\r\n        body: {\r\n          playerId,\r\n          resourceId,\r\n          amount,\r\n          locked\r\n        }\r\n      })\r\n\r\n      // Update local state\r\n      const index = resources.value.findIndex(r => r.resourceId === resourceId)\r\n      if (index !== -1) {\r\n        resources.value[index] = response.data\r\n      }\r\n\r\n      return response.data\r\n    } catch (err: any) {\r\n      error.value = err.message\r\n      console.error('Error updating resource:', err)\r\n      throw err\r\n    } finally {\r\n      loading.value = false\r\n    }\r\n  }\r\n\r\n  const updatePlayer = async (playerId: string, updates: any) => {\r\n    try {\r\n      loading.value = true\r\n      error.value = null\r\n\r\n      const response: any = await $fetch('/api/player/update', {\r\n        method: 'POST',\r\n        body: {\r\n          playerId,\r\n          ...updates\r\n        }\r\n      })\r\n\r\n      // Update local state\r\n      if (player.value) {\r\n        Object.assign(player.value, response.data)\r\n      }\r\n\r\n      return response.data\r\n    } catch (err: any) {\r\n      error.value = err.message\r\n      console.error('Error updating player:', err)\r\n      throw err\r\n    } finally {\r\n      loading.value = false\r\n    }\r\n  }\r\n\r\n  const addResource = async (playerId: string, resourceName: string, amount: number) => {\r\n    const resource = getResourceByName(resourceName)\r\n    if (!resource) {\r\n      throw new Error(`Resource ${resourceName} not found`)\r\n    }\r\n\r\n    const newAmount = Number(resource.amount) + amount\r\n    return await updateResource(playerId, resource.resourceId, newAmount, resource.locked)\r\n  }\r\n\r\n  const spendResource = async (playerId: string, resourceName: string, amount: number) => {\r\n    const resource = getResourceByName(resourceName)\r\n    if (!resource) {\r\n      throw new Error(`Resource ${resourceName} not found`)\r\n    }\r\n\r\n    if (Number(resource.amount) < amount) {\r\n      throw new Error(`Không đủ ${resourceName}`)\r\n    }\r\n\r\n    const newAmount = Number(resource.amount) - amount\r\n    return await updateResource(playerId, resource.resourceId, newAmount, resource.locked)\r\n  }\r\n\r\n  // Initialize player data\r\n  const initializePlayer = async (playerId: string) => {\r\n    await Promise.all([\r\n      fetchPlayer(playerId),\r\n      fetchResources(playerId),\r\n      fetchCompanions(playerId)\r\n    ])\r\n  }\r\n\r\n  // Reset store\r\n  const reset = () => {\r\n    player.value = null\r\n    resources.value = []\r\n    companions.value = []\r\n    achievements.value = []\r\n    quests.value = []\r\n    loading.value = false\r\n    error.value = null\r\n  }\r\n\r\n  return {\r\n    // State\r\n    player,\r\n    resources,\r\n    companions,\r\n    achievements,\r\n    quests,\r\n    loading,\r\n    error,\r\n\r\n    // Getters\r\n    getResourceByName,\r\n    getActiveCompanions,\r\n    getCompletedQuests,\r\n\r\n    // Actions\r\n    fetchPlayer,\r\n    fetchResources,\r\n    fetchCompanions,\r\n    updateResource,\r\n    updatePlayer,\r\n    addResource,\r\n    spendResource,\r\n    initializePlayer,\r\n    reset\r\n  }\r\n})\r\n"],"version":3}