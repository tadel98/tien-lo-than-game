{"file":"auth-EzXceMbr.js","mappings":";;AAGO,MAAM,eAAe,YAAY,QAAQ,MAAM;AAEpD,QAAM,OAAO,IAAI,IAAI;AACrB,QAAM,QAAQ,IAAmB,IAAI;AACrC,QAAM,kBAAkB,IAAI,KAAK;AACjC,QAAM,UAAU,IAAI,KAAK;AACzB,QAAM,QAAQ,IAAI,IAAI;AAGtB,QAAM,aAAa,SAAS,MAAM,gBAAgB,SAAS,CAAC,CAAC,MAAM,KAAK;AAGxE,QAAM,QAAQ,OAAO,UAAkB,aAAqB;AAC1D,QAAI;AACF,cAAQ,QAAQ;AAChB,YAAM,QAAQ;AAEd,YAAM,WAAgB,MAAM,OAAO,mBAAmB;AAAA,QACpD,QAAQ;AAAA,QACR,MAAM;AAAA,UACJ;AAAA,UACA;AAAA,QAAA;AAAA,MACF,CACD;AAED,UAAI,SAAS,SAAS;AACpB,aAAK,QAAQ,SAAS;AACtB,cAAM,QAAQ,SAAS;AACvB,wBAAgB,QAAQ;AAGxB,YAAI,MAAgB;AAKpB,eAAO;AAAA,MACT;AAAA,IACF,SAAS,KAAU;AACjB,YAAM,QAAQ,IAAI;AAClB,cAAQ,MAAM,gBAAgB,GAAG;AACjC,YAAM;AAAA,IACR,UAAA;AACE,cAAQ,QAAQ;AAAA,IAClB;AAAA,EACF;AAEA,QAAM,WAAW,OAAO,UAAkB,OAAe,UAAkB,eAAuB;AAChG,QAAI;AACF,cAAQ,QAAQ;AAChB,YAAM,QAAQ;AAEd,YAAM,WAAgB,MAAM,OAAO,sBAAsB;AAAA,QACvD,QAAQ;AAAA,QACR,MAAM;AAAA,UACJ;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,QAAA;AAAA,MACF,CACD;AAED,UAAI,SAAS,SAAS;AACpB,aAAK,QAAQ,SAAS;AACtB,cAAM,QAAQ,SAAS;AACvB,wBAAgB,QAAQ;AAGxB,YAAI,MAAgB;AAKpB,eAAO;AAAA,MACT;AAAA,IACF,SAAS,KAAU;AACjB,YAAM,QAAQ,IAAI;AAClB,cAAQ,MAAM,mBAAmB,GAAG;AACpC,YAAM;AAAA,IACR,UAAA;AACE,cAAQ,QAAQ;AAAA,IAClB;AAAA,EACF;AAEA,QAAM,SAAS,MAAM;AACnB,SAAK,QAAQ;AACb,UAAM,QAAQ;AACd,oBAAgB,QAAQ;AACxB,UAAM,QAAQ;AAAA,EAOhB;AAEA,QAAM,YAAY,MAAM;AAAA,EAgBxB;AAEA,QAAM,iBAAiB,MAAM;AAAA,EAE7B;AAGA,QAAM,QAAQ,MAAM;AAClB,SAAK,QAAQ;AACb,UAAM,QAAQ;AACd,oBAAgB,QAAQ;AACxB,YAAQ,QAAQ;AAChB,UAAM,QAAQ;AAAA,EAChB;AAEA,SAAO;AAAA;AAAA,IAEL;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA;AAAA,IAGA;AAAA;AAAA,IAGA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EAAA;AAEJ,CAAC;","names":[],"sources":["../../../../stores/auth.ts"],"sourcesContent":["import { defineStore } from 'pinia'\r\nimport { ref, computed } from 'vue'\r\n\r\nexport const useAuthStore = defineStore('auth', () => {\r\n  // State\r\n  const user = ref(null)\r\n  const token = ref<string | null>(null)\r\n  const isAuthenticated = ref(false)\r\n  const loading = ref(false)\r\n  const error = ref(null)\r\n\r\n  // Getters\r\n  const isLoggedIn = computed(() => isAuthenticated.value && !!token.value)\r\n\r\n  // Actions\r\n  const login = async (username: string, password: string) => {\r\n    try {\r\n      loading.value = true\r\n      error.value = null\r\n\r\n      const response: any = await $fetch('/api/auth/login', {\r\n        method: 'POST',\r\n        body: {\r\n          username,\r\n          password\r\n        }\r\n      })\r\n\r\n      if (response.success) {\r\n        user.value = response.user\r\n        token.value = response.token\r\n        isAuthenticated.value = true\r\n\r\n        // Save to localStorage\r\n        if (process.client) {\r\n          localStorage.setItem('auth_token', response.token)\r\n          localStorage.setItem('user_data', JSON.stringify(response.user))\r\n        }\r\n\r\n        return response\r\n      }\r\n    } catch (err: any) {\r\n      error.value = err.message\r\n      console.error('Login error:', err)\r\n      throw err\r\n    } finally {\r\n      loading.value = false\r\n    }\r\n  }\r\n\r\n  const register = async (username: string, email: string, password: string, playerName: string) => {\r\n    try {\r\n      loading.value = true\r\n      error.value = null\r\n\r\n      const response: any = await $fetch('/api/auth/register', {\r\n        method: 'POST',\r\n        body: {\r\n          username,\r\n          email,\r\n          password,\r\n          playerName\r\n        }\r\n      })\r\n\r\n      if (response.success) {\r\n        user.value = response.user\r\n        token.value = response.token\r\n        isAuthenticated.value = true\r\n\r\n        // Save to localStorage\r\n        if (process.client) {\r\n          localStorage.setItem('auth_token', response.token)\r\n          localStorage.setItem('user_data', JSON.stringify(response.user))\r\n        }\r\n\r\n        return response\r\n      }\r\n    } catch (err: any) {\r\n      error.value = err.message\r\n      console.error('Register error:', err)\r\n      throw err\r\n    } finally {\r\n      loading.value = false\r\n    }\r\n  }\r\n\r\n  const logout = () => {\r\n    user.value = null\r\n    token.value = null\r\n    isAuthenticated.value = false\r\n    error.value = null\r\n\r\n    // Clear localStorage\r\n    if (process.client) {\r\n      localStorage.removeItem('auth_token')\r\n      localStorage.removeItem('user_data')\r\n    }\r\n  }\r\n\r\n  const checkAuth = () => {\r\n    if (process.client) {\r\n      const storedToken = localStorage.getItem('auth_token')\r\n      const storedUser = localStorage.getItem('user_data')\r\n\r\n      if (storedToken && storedUser) {\r\n        try {\r\n          token.value = storedToken\r\n          user.value = JSON.parse(storedUser)\r\n          isAuthenticated.value = true\r\n        } catch (err) {\r\n          console.error('Error parsing stored user data:', err)\r\n          logout()\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  const initializeAuth = () => {\r\n    checkAuth()\r\n  }\r\n\r\n  // Reset store\r\n  const reset = () => {\r\n    user.value = null\r\n    token.value = null\r\n    isAuthenticated.value = false\r\n    loading.value = false\r\n    error.value = null\r\n  }\r\n\r\n  return {\r\n    // State\r\n    user,\r\n    token,\r\n    isAuthenticated,\r\n    loading,\r\n    error,\r\n\r\n    // Getters\r\n    isLoggedIn,\r\n\r\n    // Actions\r\n    login,\r\n    register,\r\n    logout,\r\n    checkAuth,\r\n    initializeAuth,\r\n    reset\r\n  }\r\n})\r\n"],"version":3}