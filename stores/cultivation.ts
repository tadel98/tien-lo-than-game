import { defineStore } from 'pinia'
import { ref, computed } from 'vue'
import { 
  expPerDay, 
  expForRealm,
  expToNextFloor, 
  expToNextRealm,
  expToCurrentLevel,
  getSuccessRate,
  getRealmName,
  getQualityLevel,
  getEternalTitle,
  calculatePowerMultiplier,
  getQualityColor,
  canBreakthroughFromFloor10,
  canAttemptHighFloors,
  REALMS,
  FLOORS,
  FAIL_RATES,
  REALM_NAMES,
  QUALITY_LEVELS,
  ETERNAL_TITLES
} from '../utils/expCalc'

// Declare $fetch as global
declare const $fetch: any

export const useCultivationStore = defineStore('cultivation', () => {
  // State
  const cultivationStatus = ref<any>(null)
  const isCultivating = ref(false)
  const loading = ref(false)
  const error = ref(null)

  // New cultivation system state
  const currentRealm = ref(1) // 1-9
  const currentFloor = ref(1) // 1-15
  const currentExp = ref(0)
  const totalExpGained = ref(0)
  const currentQuality = ref('H·∫° Ph·∫©m') // Ph·∫©m ch·∫•t hi·ªán t·∫°i
  const eternalTitles = ref<Array<{
    name: string
    description: string
    floor: number
    realm: number
  }>>([]) // Danh s√°ch danh hi·ªáu vƒ©nh c·ª≠u
  const hasAscended = ref(false) // ƒê√£ phi thƒÉng ch∆∞a


  // Getters
  const canCultivate = computed(() => {
    return cultivationStatus.value?.canCultivate || false
  })

  const canBreakthrough = computed(() => {
    if (!cultivationStatus.value) return false
    const { currentExp, nextLevelExp } = cultivationStatus.value.cultivation
    return currentExp >= nextLevelExp
  })

  const progressPercentage = computed(() => {
    return cultivationStatus.value?.cultivation?.progressPercentage || 0
  })

  const currentRealmDisplay = computed(() => {
    return `${getRealmName(currentRealm.value)} T·∫ßng ${currentFloor.value}`
  })

  const expToNextFloorValue = computed(() => {
    return expToNextFloor(currentRealm.value, currentFloor.value)
  })

  const canBreakthroughFloor = computed(() => {
    // T·∫ßng 1-9: C·∫ßn ƒë·ªß EXP
    if (currentFloor.value < 10) {
      return currentExp.value >= expToNextFloorValue.value
    }
    // T·∫ßng 10: Lu√¥n c√≥ th·ªÉ th·ª≠ (c√≥ 2 l·ª±a ch·ªçn)
    if (currentFloor.value === 10) {
      return true
    }
    // T·∫ßng 11-15: Lu√¥n c√≥ th·ªÉ th·ª≠ (th·∫•t b·∫°i s·∫Ω l√™n c·∫£nh gi·ªõi ti·∫øp theo)
    if (currentFloor.value >= 11) {
      return true
    }
    return false
  })

  const canBreakthroughRealm = computed(() => {
    return currentFloor.value >= FLOORS && currentExp.value >= expToNextRealm(currentRealm.value)
  })

  const currentFloorSuccessRate = computed(() => {
    return getSuccessRate(currentFloor.value)
  })

  const isMaxLevel = computed(() => {
    return currentRealm.value >= REALMS && currentFloor.value >= FLOORS
  })

  const expPerDayCurrent = computed(() => {
    return expPerDay(currentRealm.value)
  })

  // New quality and title system
  const currentQualityLevel = computed(() => {
    return getQualityLevel(currentFloor.value)
  })

  const currentQualityColor = computed(() => {
    return getQualityColor(currentQuality.value)
  })

  const powerMultiplier = computed(() => {
    return calculatePowerMultiplier(currentQuality.value)
  })

  const canBreakthroughFromFloor10Value = computed(() => {
    return canBreakthroughFromFloor10(currentFloor.value)
  })

  const canAttemptHighFloorsValue = computed(() => {
    return canAttemptHighFloors(currentFloor.value)
  })

  const isAtFloor10 = computed(() => {
    return currentFloor.value === 10
  })

  const isAtFloor15 = computed(() => {
    return currentFloor.value === 15
  })

  const isAtMaxRealm = computed(() => {
    return currentRealm.value >= REALMS
  })

  const canAscend = computed(() => {
    return isAtMaxRealm.value && isAtFloor15.value
  })


  // Actions
  const fetchCultivationStatus = async (playerId: string) => {
    try {
      loading.value = true
      error.value = null

      const response: any = await $fetch(`/api/cultivation/status?playerId=${playerId}`)
      cultivationStatus.value = response.data
    } catch (err: any) {
      error.value = err.message
      console.error('Error fetching cultivation status:', err)
    } finally {
      loading.value = false
    }
  }

  const startCultivation = async (playerId: string, cultivationType: string = 'basic') => {
    try {
      loading.value = true
      error.value = null
      isCultivating.value = true

      const response: any = await $fetch('/api/cultivation/start', {
        method: 'POST',
        body: {
          playerId,
          cultivationType
        }
      })

      // C·∫≠p nh·∫≠t tr·∫°ng th√°i tu luy·ªán
      await fetchCultivationStatus(playerId)

      return response.data
    } catch (err: any) {
      error.value = err.message
      console.error('Error starting cultivation:', err)
      throw err
    } finally {
      loading.value = false
      isCultivating.value = false
    }
  }

  const breakthrough = async (playerId: string) => {
    try {
      loading.value = true
      error.value = null

      const response: any = await $fetch('/api/cultivation/breakthrough', {
        method: 'POST',
        body: {
          playerId
        }
      })

      // C·∫≠p nh·∫≠t tr·∫°ng th√°i tu luy·ªán
      await fetchCultivationStatus(playerId)

      return response.data
    } catch (err: any) {
      error.value = err.message
      console.error('Error breakthrough:', err)
      throw err
    } finally {
      loading.value = false
    }
  }

  const getCultivationInfo = (level: number) => {
    const realms = [
      { name: 'Ph√†m c·∫£nh', min: 1, max: 9, color: '#6b7280' },
      { name: 'Luy·ªán Kh√≠ c·∫£nh', min: 10, max: 49, color: '#3b82f6' },
      { name: 'Tr√∫c C∆° c·∫£nh', min: 50, max: 99, color: '#10b981' },
      { name: 'Kim ƒêan c·∫£nh', min: 100, max: 199, color: '#f59e0b' },
      { name: 'Nguy√™n Anh c·∫£nh', min: 200, max: 499, color: '#ef4444' },
      { name: 'H√≥a Th·∫ßn c·∫£nh', min: 500, max: 999, color: '#8b5cf6' },
      { name: 'H·ª£p Th·ªÉ c·∫£nh', min: 1000, max: 1000, color: '#f97316' } // C·∫£nh gi·ªõi cao nh·∫•t
    ]

    const currentRealm = realms.find(realm => level >= realm.min && level <= realm.max) || realms[0]
    const nextRealm = realms.find(realm => realm.min > level) || realms[realms.length - 1]

    return {
      currentRealm,
      nextRealm,
      isMaxLevel: level >= 1000 // C·∫£nh gi·ªõi cao nh·∫•t l√† level 1000
    }
  }

  const getRealmColor = (realm: string) => {
    const realmColors = {
      'Luy·ªán Kh√≠': '#3b82f6',      // Blue
      'Tr√∫c C∆°': '#10b981',         // Green
      'Kim ƒêan': '#f59e0b',         // Yellow
      'Nguy√™n Anh': '#ef4444',      // Red
      'H√≥a Th·∫ßn': '#8b5cf6',        // Purple
      'Luy·ªán H∆∞': '#06b6d4',        // Cyan
      'H·ª£p Th·ªÉ': '#f97316',         // Orange
      'ƒê·∫°i Th·ª´a': '#ec4899',        // Pink
      'ƒê·ªô Ki·∫øp': '#fbbf24'          // Gold
    }
    return realmColors[realm] || '#6b7280'
  }

  // New cultivation system actions
  const addExp = (amount: number) => {
    currentExp.value += amount
    totalExpGained.value += amount
  }

  const breakthroughFloor = () => {
    if (!canBreakthroughFloor.value) return false
    
    currentExp.value -= expToNextFloorValue.value
    currentFloor.value += 1
    
    return true
  }

  const breakthroughRealm = (quality = 'H·∫° Ph·∫©m') => {
    if (!canBreakthroughRealm.value && !canBreakthroughFromFloor10Value.value) return false
    
    // C·∫≠p nh·∫≠t ph·∫©m ch·∫•t
    currentQuality.value = quality
    
    // Th√™m danh hi·ªáu vƒ©nh c·ª≠u n·∫øu c√≥
    const title = getEternalTitle(currentFloor.value)
    if (title && !eternalTitles.value.find((t: any) => t.floor === currentFloor.value)) {
      eternalTitles.value.push({
        ...title,
        floor: currentFloor.value,
        realm: currentRealm.value
      })
    }
    
    // Tr·ª´ EXP n·∫øu c·∫ßn
    if (currentExp.value >= expToNextRealm(currentRealm.value)) {
      currentExp.value -= expToNextRealm(currentRealm.value)
    }
    
    currentRealm.value += 1
    currentFloor.value = 1
    
    return true
  }

  const attemptBreakthroughFloor = () => {
    // T·∫ßng 1-9: ƒê·ªôt ph√° b√¨nh th∆∞·ªùng
    if (currentFloor.value < 10) {
      if (currentExp.value >= expToNextFloorValue.value) {
        return breakthroughFloor()
      }
      return false
    }
    
    // T·∫ßng 10: Kh√¥ng n√™n g·ªçi function n√†y, n√™n d√πng c√°c function chuy√™n bi·ªát
    if (currentFloor.value === 10) {
      return false
    }
    
    // T·∫ßng 11-15: Th·ª≠ ƒë·ªôt ph√° v·ªõi r·ªßi ro
    if (currentFloor.value >= 11) {
      const successRate = currentFloorSuccessRate.value
      const isSuccess = Math.random() < successRate
      
      if (isSuccess) {
        return breakthroughFloor()
      } else {
        // Th·∫•t b·∫°i: L√™n c·∫£nh gi·ªõi ti·∫øp theo v·ªõi ph·∫©m ch·∫•t t∆∞∆°ng ·ª©ng
        const quality = getQualityLevel(currentFloor.value)
        return breakthroughRealm(quality)
      }
    }
    
    return false
  }

  // ƒê·ªôt ph√° c·∫£nh gi·ªõi t·ª´ t·∫ßng 10 (H·∫° Ph·∫©m)
  const breakthroughRealmFromFloor10 = () => {
    if (!canBreakthroughFromFloor10Value.value) return false
    return breakthroughRealm('H·∫° Ph·∫©m')
  }

  // Th·ª≠ ƒë·ªôt ph√° t·∫ßng 11-15 (c√≥ ph·∫©m ch·∫•t cao)
  const attemptHighFloorBreakthrough = () => {
    if (!canAttemptHighFloorsValue.value) return false
    return attemptBreakthroughFloor()
  }

  // Phi thƒÉng (k·∫øt th√∫c game)
  const ascend = () => {
    if (!canAscend.value) return false
    
    hasAscended.value = true
    console.log('üéâ Ch√∫c m·ª´ng! B·∫°n ƒë√£ Phi ThƒÉng th√†nh c√¥ng!')
    return true
  }

  const attemptBreakthroughRealm = () => {
    if (canBreakthroughRealm.value) {
      return breakthroughRealm()
    }
    return false
  }

  const getCultivationStats = () => {
    return {
      currentRealm: currentRealm.value,
      currentFloor: currentFloor.value,
      currentExp: currentExp.value,
      expToNextFloor: expToNextFloorValue.value,
      expToNextRealm: expToNextRealm(currentRealm.value),
      canBreakthroughFloor: canBreakthroughFloor.value,
      canBreakthroughRealm: canBreakthroughRealm.value,
      successRate: currentFloorSuccessRate.value,
      isMaxLevel: isMaxLevel.value,
      expPerDay: expPerDayCurrent.value
    }
  }

  const resetCultivation = () => {
    currentRealm.value = 1
    currentFloor.value = 1
    currentExp.value = 0
    totalExpGained.value = 0
    currentQuality.value = 'H·∫° Ph·∫©m'
    eternalTitles.value = []
    hasAscended.value = false
  }



  // Reset store
  const reset = () => {
    cultivationStatus.value = null
    isCultivating.value = false
    loading.value = false
    error.value = null
    resetCultivation()
  }

  return {
    // State
    cultivationStatus,
    isCultivating,
    loading,
    error,
    currentRealm,
    currentFloor,
    currentExp,
    totalExpGained,
    currentQuality,
    eternalTitles,
    hasAscended,

    // Getters
    canCultivate,
    canBreakthrough,
    progressPercentage,
    currentRealmDisplay,
    expToNextFloor: expToNextFloorValue,
    canBreakthroughFloor,
    canBreakthroughRealm,
    currentFloorSuccessRate,
    isMaxLevel,
    expPerDayCurrent,
    currentQualityLevel,
    currentQualityColor,
    powerMultiplier,
    canBreakthroughFromFloor10: canBreakthroughFromFloor10Value,
    canAttemptHighFloors: canAttemptHighFloorsValue,
    isAtFloor10,
    isAtFloor15,
    isAtMaxRealm,
    canAscend,

    // Actions
    fetchCultivationStatus,
    startCultivation,
    breakthrough,
    getCultivationInfo,
    getRealmColor,
    addExp,
    breakthroughFloor,
    breakthroughRealm,
    attemptBreakthroughFloor,
    attemptBreakthroughRealm,
    breakthroughRealmFromFloor10,
    attemptHighFloorBreakthrough,
    ascend,
    getCultivationStats,
    resetCultivation,
    reset
  }
})
